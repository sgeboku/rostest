// Generated by gencpp from file ros_adder/Adder.msg
// DO NOT EDIT!


#ifndef ROS_ADDER_MESSAGE_ADDER_H
#define ROS_ADDER_MESSAGE_ADDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_adder
{
template <class ContainerAllocator>
struct Adder_
{
  typedef Adder_<ContainerAllocator> Type;

  Adder_()
    : arg_x(0)
    , arg_y(0)  {
    }
  Adder_(const ContainerAllocator& _alloc)
    : arg_x(0)
    , arg_y(0)  {
  (void)_alloc;
    }



   typedef int32_t _arg_x_type;
  _arg_x_type arg_x;

   typedef int32_t _arg_y_type;
  _arg_y_type arg_y;





  typedef boost::shared_ptr< ::ros_adder::Adder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_adder::Adder_<ContainerAllocator> const> ConstPtr;

}; // struct Adder_

typedef ::ros_adder::Adder_<std::allocator<void> > Adder;

typedef boost::shared_ptr< ::ros_adder::Adder > AdderPtr;
typedef boost::shared_ptr< ::ros_adder::Adder const> AdderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_adder::Adder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_adder::Adder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_adder::Adder_<ContainerAllocator1> & lhs, const ::ros_adder::Adder_<ContainerAllocator2> & rhs)
{
  return lhs.arg_x == rhs.arg_x &&
    lhs.arg_y == rhs.arg_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_adder::Adder_<ContainerAllocator1> & lhs, const ::ros_adder::Adder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_adder

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_adder::Adder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_adder::Adder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_adder::Adder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_adder::Adder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_adder::Adder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_adder::Adder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_adder::Adder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e786a8255416662901d0f10732f9d69a";
  }

  static const char* value(const ::ros_adder::Adder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe786a82554166629ULL;
  static const uint64_t static_value2 = 0x01d0f10732f9d69aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_adder::Adder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_adder/Adder";
  }

  static const char* value(const ::ros_adder::Adder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_adder::Adder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 arg_x\n"
"int32 arg_y\n"
;
  }

  static const char* value(const ::ros_adder::Adder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_adder::Adder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arg_x);
      stream.next(m.arg_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Adder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_adder::Adder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_adder::Adder_<ContainerAllocator>& v)
  {
    s << indent << "arg_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arg_x);
    s << indent << "arg_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arg_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ADDER_MESSAGE_ADDER_H
